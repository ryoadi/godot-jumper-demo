[gd_scene load_steps=3 format=3 uid="uid://dfymgkljymubx"]

[sub_resource type="GDScript" id="GDScript_iywne"]
resource_name = "PlatformManager"
script/source = "class_name PlatformManager extends Node

## Platform scene to spawn.
@export var _platform_scene: PackedScene

## Initial platform speed.
@export var _initial_speed: float = 50

## Platform overtime speed up value.
@export var _increased_speed: float = 5

## Should the platforms moving.
var is_moving: bool = false:
	set(value):
		if is_moving == value: return
		is_moving = value
		match value:
			true: $SpeedupTimer.start()
			false: $SpeedupTimer.stop()

# Gap between platforms.
@onready var _platform_gap: float = $SpawnActivator.global_position.y

# Platform movement speed.
@onready var _speed: float = _initial_speed:
	set(value):
		_speed = value
		get_tree().call_group('platforms', 'set_constant_linear_velocity', Vector2.DOWN * _speed)

# first platform
var _first_platform: StaticBody2D

# Patform where to player stand. 
var _current_platform: StaticBody2D:
	set(new_platform):
		var distance: float = 0
		if new_platform == _current_platform:
			return
			
		if _current_platform != null:
			distance = max(
				0,
				_current_platform.global_position.y - new_platform.global_position.y,
			) 
		
		_current_platform = new_platform
		_last_platform_distance = distance
		
# distance calculation of last platform.
var _last_platform_distance: float = 0

## Prepare platforms to start a game.
func reset() -> void:
	# reset values
	get_tree().call_group('platforms', 'queue_free')
	is_moving = false
	$Lanes.reset()
	_speed = _initial_speed
	
	# (re)spawn platforms
	# 1st platform in the defined position
	_first_platform = _spawn_platform($FirstPlatformMarker.global_position)

	# Spawn other platforms to fill up the screen
	var platform_gap: float = $FirstPlatformMarker.global_position.y - _platform_gap
	while platform_gap > 0:
		_spawn_platform(Vector2($Lanes.next_lane.x, platform_gap))
		platform_gap -= _platform_gap
		
func update_current_platform(platform: StaticBody2D) -> float:
	_current_platform = platform
	return _last_platform_distance

# spawn single platform. 
# default to randomly marked x position, top screen
func _spawn_platform(
	spawn_position: Vector2 = $Lanes.next_lane
) -> StaticBody2D:
	assert(_platform_scene, 'Platform scene not assigned!')
	
	var platform: StaticBody2D = _platform_scene.instantiate()
	platform.global_position = spawn_position
	platform.set_meta('new', true)
	platform.add_to_group('platforms')
	add_child(platform)
	
	return platform


func _process(delta: float) -> void:
	if is_moving:
		get_tree().call_group('platforms', 'move_local_y', delta * _speed)


func _physics_process(delta: float) -> void:
	var platform: StaticBody2D = $SpawnActivator.get_collider()
	if platform and platform.has_meta('new'):
		_spawn_platform()
		platform.remove_meta('new')


func _on_speedup_timer_timeout() -> void:
	_speed += _increased_speed
	if _speed > 500:
		$SpeedupTimer.stop()
"

[sub_resource type="GDScript" id="GDScript_133ji"]
resource_name = "PlatformLanes"
script/source = "extends Node

var _initial_lane: int = 2
var _current_lane: int = _initial_lane
@onready var _lanes: Array[Marker2D] = [
	$Lane1,
	$Lane2,
	$Lane3,
	$Lane4,
	$Lane5,
]

var next_lane: Vector2:
	get:
		var _lane: int = _current_lane
		match _lane:
			0: _current_lane = randi_range(0, 2)
			1: _current_lane = randi_range(0, 3)
			2: _current_lane = randi_range(0, 4)
			3: _current_lane = randi_range(1, 4)
			_: _current_lane = randi_range(2, 4)
		
		return _lanes[_lane].global_position
		
func reset() -> void:
	_current_lane = _initial_lane
"

[node name="PlatformManager" type="Node"]
script = SubResource("GDScript_iywne")
metadata/speed = 0.0

[node name="Lanes" type="Node" parent="."]
script = SubResource("GDScript_133ji")

[node name="Lane1" type="Marker2D" parent="Lanes"]
position = Vector2(192, 0)

[node name="Lane2" type="Marker2D" parent="Lanes"]
position = Vector2(384, 0)

[node name="Lane3" type="Marker2D" parent="Lanes"]
position = Vector2(576, 0)

[node name="Lane4" type="Marker2D" parent="Lanes"]
position = Vector2(768, 0)

[node name="Lane5" type="Marker2D" parent="Lanes"]
position = Vector2(960, 0)

[node name="FirstPlatformMarker" type="Marker2D" parent="."]
position = Vector2(576, 576)

[node name="SpawnActivator" type="RayCast2D" parent="."]
position = Vector2(0, 64)
target_position = Vector2(1152, 0)

[node name="SpeedupTimer" type="Timer" parent="."]

[connection signal="timeout" from="SpeedupTimer" to="." method="_on_speedup_timer_timeout"]
