[gd_scene load_steps=8 format=3 uid="uid://gwcketf6ntis"]

[ext_resource type="PackedScene" uid="uid://dfymgkljymubx" path="res://scenes/platform_manager.tscn" id="1_o5qli"]
[ext_resource type="Texture2D" uid="uid://csgf48uy1ocvm" path="res://Pixel Adventure 1/Free/Background/Brown.png" id="1_tbgi4"]
[ext_resource type="PackedScene" uid="uid://sbt8r6ckfb54" path="res://scenes/platform.tscn" id="2_sugp2"]
[ext_resource type="PackedScene" uid="uid://cr88trrnav8tr" path="res://scenes/player.tscn" id="4_jyhfs"]
[ext_resource type="AudioStream" uid="uid://ck3ofpmhieijs" path="res://brackeys_platformer_assets/music/time_for_adventure.mp3" id="4_tbgi4"]

[sub_resource type="GDScript" id="GDScript_0wfyh"]
resource_name = "Game"
script/source = "extends Node

enum GameState {
	Play,
	GameOver,
}
var _state: GameState:
	set(value):
		match _state:
			GameState.Play:
				$GameUI.hide()
			GameState.GameOver:
				$GameOverUI.hide()
		
		match value:
			GameState.Play:
				_height = 0
				$GameUI.show()
				$PlatformManager.reset()
				$PlayerManager.spawn()
				$Parallax2D.autoscroll = Vector2.ZERO
			GameState.GameOver:
				$GameOverUI/VBoxContainer/ScoreLabel.text = \"Height: %.1f m\" % (_height / 100.0)
				$GameOverUI.show()
				
		_state = value


var _height: float = 0:
	set(value):
		_height = value
		$GameUI/ScoreLabel.text = \"%.1f m\" % (_height / 100.0)
		if _height > 0:
			$PlatformManager.is_moving = true
		

func _ready() -> void:
	$PlayerManager.init($Player)
	_state = GameState.Play

func _on_player_landed() -> void:
	var collission: KinematicCollision2D = $Player.get_last_slide_collision()
	if collission:
		_height += $PlatformManager.update_current_platform(
			collission.get_collider()
			)


func _on_player_manager_player_fell_off() -> void:
	_state = GameState.GameOver


func _on_restart_button_button_up() -> void:
	_state = GameState.Play


func _on_platform_manager_speed_increased(new_speed: float) -> void:
	if $PlatformManager.is_moving:
		$Parallax2D.autoscroll = Vector2.DOWN * (new_speed / 2)
"

[sub_resource type="GDScript" id="GDScript_sugp2"]
resource_name = "PlayerManager"
script/source = "extends Node

var _player: CharacterBody2D
var _initial_position: Vector2


# Record platform where to player stand. 
var _current_platform: StaticBody2D:
	set(new_platform):
		var distance: float = 0
		if new_platform == _current_platform:
			return
			
		if _current_platform != null:
			distance = max(
				0,
				_current_platform.global_position.y - new_platform.global_position.y,
			) 
		
		_current_platform = new_platform
		emit_signal('current_platform_changed', distance)


## Give distances between old & current platforms when player jump between it.
signal current_platform_changed(distance: float)

## Player fell off outside screen.
signal player_fell_off

func init(player: CharacterBody2D) -> void:
	_player = player
	_initial_position = _player.global_position


## (Re)spawn player at dedicated position
func spawn() -> void:
	_player.global_position = _initial_position
	_player.process_mode = Node.PROCESS_MODE_PAUSABLE
	_player.show()


func _on_player_screen_notifier_exited() -> void:
	if _player.global_position.y > 0:
		_player.hide()
		_player.process_mode = Node.PROCESS_MODE_DISABLED
		emit_signal('player_fell_off')

func _unhandled_input(event: InputEvent) -> void:	
	assert(_player)
	
	if event.is_action_pressed(\"jump\"):
		_player.jump()
	if event.is_action_pressed(\"move_left\"):
		_player.move(Vector2.LEFT)
	if event.is_action_released(\"move_left\"):
		_player.move_stop(Vector2.LEFT)
	if event.is_action_pressed(\"move_right\"):
		_player.move(Vector2.RIGHT)
	if event.is_action_released(\"move_right\"):
		_player.move_stop(Vector2.RIGHT)
"

[node name="GameManager" type="Node"]
script = SubResource("GDScript_0wfyh")

[node name="Parallax2D" type="Parallax2D" parent="."]
repeat_size = Vector2(0, 64)
ignore_camera_scroll = true

[node name="Sprite2D" type="TextureRect" parent="Parallax2D"]
texture_repeat = 2
offset_right = 1152.0
offset_bottom = 648.0
texture = ExtResource("1_tbgi4")
stretch_mode = 1

[node name="PlatformManager" parent="." instance=ExtResource("1_o5qli")]
_platform_scene = ExtResource("2_sugp2")

[node name="PlayerManager" type="Node" parent="."]
script = SubResource("GDScript_sugp2")

[node name="Player" parent="." instance=ExtResource("4_jyhfs")]
position = Vector2(576, 520)

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="Player"]

[node name="GameUI" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="ScoreLabel" type="Label" parent="GameUI"]
layout_mode = 0
offset_left = 20.0
offset_top = 20.0
offset_right = 146.0
offset_bottom = 87.0
theme_override_constants/outline_size = 2
theme_override_font_sizes/font_size = 48
text = "0.0 m"

[node name="GameOverUI" type="Panel" parent="."]
visible = false
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="VBoxContainer" type="VBoxContainer" parent="GameOverUI"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -102.0
offset_top = -54.5
offset_right = 102.0
offset_bottom = 54.5
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 20

[node name="ScoreLabel" type="Label" parent="GameOverUI/VBoxContainer"]
layout_mode = 2
theme_override_font_sizes/font_size = 32
text = "Height: 0.0 m"
horizontal_alignment = 1

[node name="RestartButton" type="Button" parent="GameOverUI/VBoxContainer"]
custom_minimum_size = Vector2(200, 60)
layout_mode = 2
theme_override_font_sizes/font_size = 28
text = "RESTART"

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("4_tbgi4")
autoplay = true
parameters/looping = true

[connection signal="speed_increased" from="PlatformManager" to="." method="_on_platform_manager_speed_increased"]
[connection signal="current_platform_changed" from="PlayerManager" to="." method="_on_player_manager_current_platform_changed"]
[connection signal="player_fell_off" from="PlayerManager" to="." method="_on_player_manager_player_fell_off"]
[connection signal="landed" from="Player" to="." method="_on_player_landed"]
[connection signal="screen_exited" from="Player/VisibleOnScreenNotifier2D" to="PlayerManager" method="_on_player_screen_notifier_exited"]
[connection signal="button_up" from="GameOverUI/VBoxContainer/RestartButton" to="." method="_on_restart_button_button_up"]
