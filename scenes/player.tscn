[gd_scene load_steps=4 format=3 uid="uid://nkgytfkunccm"]

[ext_resource type="Texture2D" uid="uid://cy83cuoanivkr" path="res://icon.svg" id="1_3vyb7"]

[sub_resource type="GDScript" id="GDScript_3vyb7"]
resource_name = "player"
script/source = "extends CharacterBody2D

# Movement parameters
@export var move_speed: float = 300.0
@export var jump_velocity: float = -600.0
@export var gravity: float = 2000.0
@export var air_control: float = 1.0  # 1.0 = full air control

# Coyote time (grace period for jumping after leaving platform)
@export var coyote_time: float = 0.1
var coyote_timer: float = 0.0

# Jump buffering (allows jump input slightly before landing)
@export var jump_buffer_time: float = 0.1
var jump_buffer_timer: float = 0.0

# State tracking
var was_on_floor: bool = false

# Signals
signal landed_on_platform
signal fell_off_screen

func _ready() -> void:
	# Ensure gravity is applied correctly
	pass

func _physics_process(delta: float) -> void:
	# Handle gravity
	if not is_on_floor():
		velocity.y += gravity * delta
	
	# Update coyote time
	if is_on_floor():
		coyote_timer = coyote_time
	else:
		coyote_timer -= delta
	
	# Update jump buffer
	if jump_buffer_timer > 0:
		jump_buffer_timer -= delta
	
	# Handle jump input
	if Input.is_action_just_pressed(\"jump\"):
		jump_buffer_timer = jump_buffer_time
	
	# Execute jump if conditions are met
	if jump_buffer_timer > 0 and coyote_timer > 0:
		velocity.y = jump_velocity
		jump_buffer_timer = 0
		coyote_timer = 0
	
	# Handle horizontal movement
	var direction := Input.get_axis(\"move_left\", \"move_right\")
	
	if direction != 0:
		# Apply air control multiplier if in air
		var control_multiplier = air_control if not is_on_floor() else 1.0
		velocity.x = direction * move_speed * control_multiplier
	else:
		# Apply friction when no input
		velocity.x = move_toward(velocity.x, 0, move_speed * delta * 8)
	
	# Detect landing
	if not was_on_floor and is_on_floor():
		emit_signal(\"landed_on_platform\")
	
	was_on_floor = is_on_floor()
	
	# Move the player
	move_and_slide()

func get_height_reached() -> float:
	# Returns negative Y position as height (since Y is inverted)
	return -global_position.y

func reset_position(pos: Vector2) -> void:
	global_position = pos
	velocity = Vector2.ZERO
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_g2els"]

[node name="Player" type="CharacterBody2D"]
script = SubResource("GDScript_3vyb7")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.5, 0.5)
texture = ExtResource("1_3vyb7")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2(3, 3)
shape = SubResource("RectangleShape2D_g2els")
