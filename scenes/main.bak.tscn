[gd_scene load_steps=6 format=3 uid="uid://cyk7sehl7wlww"]

[ext_resource type="PackedScene" path="res://scenes/platform_spawn_markers.tscn" id="1_jo7rj"]
[ext_resource type="PackedScene" uid="uid://nkgytfkunccm" path="res://scenes/player.bak.tscn" id="2_jmp2e"]
[ext_resource type="PackedScene" uid="uid://ktq7ea4g5dt1" path="res://scenes/ui_manager.bak.tscn" id="3_cnc4v"]

[sub_resource type="GDScript" id="GDScript_lbhrr"]
resource_name = "Game"
script/source = "extends Node2D

# Node references
@onready var game_manager: Node = $GameManager
@onready var platform_manager: Node2D = $PlatformManager
@onready var player: CharacterBody2D = $Player
@onready var ui_manager: CanvasLayer = $UIManager

func _ready() -> void:
	# Setup references in game manager
	game_manager.player = player
	game_manager.platform_manager = platform_manager
	game_manager.ui_manager = ui_manager
	game_manager.player_start_position = player.position
	
	# Setup reference in UI manager
	ui_manager.game_manager = game_manager
	
	# Connect signals
	game_manager.score_updated.connect(_on_score_updated)
	game_manager.game_over_triggered.connect(_on_game_over)
	game_manager.game_started.connect(_on_game_started)
	
	
	# Show menu with animated preview
	game_manager.show_menu_with_preview()
	ui_manager.show_start_menu(game_manager.get_high_score())

func _on_game_started() -> void:
	ui_manager.show_game_ui()

func _on_score_updated(height: float) -> void:
	ui_manager.update_score(height)

func _on_game_over(final_height: float, is_new_high_score: bool) -> void:
	ui_manager.show_game_over(final_height, game_manager.get_high_score(), is_new_high_score)
"

[sub_resource type="GDScript" id="GDScript_yqjtg"]
resource_name = "GameManager"
script/source = "extends Node

# Game states
enum GameState {
	MENU,
	PLAYING,
	GAME_OVER
}

var current_state: GameState = GameState.MENU

# References (will be set in main scene)
var player: CharacterBody2D
var platform_manager: Node2D
var camera: Camera2D
var ui_manager: Node

# Score tracking
var current_height: float = 0.0
var highest_height: float = 0.0
var high_score: float = 0.0

# Player starting position
var player_start_position: Vector2 = Vector2(576, 500)

# Death zone (below screen bottom)
var death_zone_offset: float = 100.0

# Save file
const SAVE_FILE_PATH = \"user://highscore.save\"

# Signals
signal score_updated(height: float)
signal game_over_triggered(final_height: float, is_new_high_score: bool)
signal game_started

func _ready() -> void:
	load_high_score()

func _process(_delta: float) -> void:
	if current_state == GameState.PLAYING:
		update_score()
		check_death_zone()
		update_camera()
		
		# Check if player has left starting platform to activate scrolling
		#if platform_manager and player:
			##platform_manager.check_player_left_starting_platform(player.global_position.y)
			### Update difficulty based on gameplay
			##platform_manager.update_platform_speeds()

func show_menu_with_preview() -> void:
	\"\"\"Show menu with animated platforms in background\"\"\"
	current_state = GameState.MENU
	
	# Hide player
	if player:
		player.visible = false
	
	# Start platform preview animation
	if platform_manager:
		platform_manager.spawn_starting_platforms()
		platform_manager.descend()
	

func start_game() -> void:
	\"\"\"Start actual gameplay\"\"\"
	current_state = GameState.PLAYING
	current_height = 0.0
	highest_height = 0.0
	
	# Show and reset player
	if player:
		player.visible = true
		player.reset_position(player_start_position)
	
	# Switch platform manager to game mode (stationary platforms)
	if platform_manager:
		platform_manager.reset()
	
	# Reset camera
	if camera:
		camera.global_position = player_start_position
	
	emit_signal(\"game_started\")

func update_score() -> void:
	if not player:
		return
	
	# Calculate height (negative Y is up, so we negate it)
	current_height = player.get_height_reached()
	
	# Update highest height
	if current_height > highest_height:
		highest_height = current_height
		emit_signal(\"score_updated\", highest_height)

func update_camera() -> void:
	if not player or not camera:
		return
	
	# Camera follows player upward only
	if player.global_position.y < camera.global_position.y:
		camera.global_position.y = player.global_position.y
	
	# Keep camera centered horizontally
	camera.global_position.x = get_viewport().get_visible_rect().size.x / 2

func check_death_zone() -> void:
	if not player or not camera:
		return
	
	# Check if player fell below camera view
	var camera_bottom = camera.global_position.y + (get_viewport().get_visible_rect().size.y / 2) + death_zone_offset
	
	if player.global_position.y > camera_bottom:
		trigger_game_over()

func trigger_game_over() -> void:
	if current_state != GameState.PLAYING:
		return
	
	current_state = GameState.GAME_OVER
	
	# Stop platform scrolling
	if platform_manager:
		platform_manager.stop_scrolling()
	
	# Check if new high score
	var is_new_high_score = false
	if highest_height > high_score:
		high_score = highest_height
		is_new_high_score = true
		save_high_score()
	
	emit_signal(\"game_over_triggered\", highest_height, is_new_high_score)

func restart_game() -> void:
	start_game()

func return_to_menu() -> void:
	show_menu_with_preview()

func save_high_score() -> void:
	var save_file = FileAccess.open(SAVE_FILE_PATH, FileAccess.WRITE)
	if save_file:
		save_file.store_float(high_score)
		save_file.close()

func load_high_score() -> void:
	if FileAccess.file_exists(SAVE_FILE_PATH):
		var save_file = FileAccess.open(SAVE_FILE_PATH, FileAccess.READ)
		if save_file:
			high_score = save_file.get_float()
			save_file.close()
	else:
		high_score = 0.0

func get_high_score() -> float:
	return high_score

func get_current_height() -> float:
	return highest_height

func is_playing() -> bool:
	return current_state == GameState.PLAYING

func format_height(height: float) -> String:
	# Format height as meters with 1 decimal place
	return \"%.1f m\" % (height / 100.0)
"

[node name="Game" type="Node2D"]
script = SubResource("GDScript_lbhrr")

[node name="PlatformManager" parent="." instance=ExtResource("1_jo7rj")]
position = Vector2(1, -1)

[node name="Player" parent="." instance=ExtResource("2_jmp2e")]
position = Vector2(581, 260)

[node name="GameManager" type="Node" parent="."]
script = SubResource("GDScript_yqjtg")

[node name="UIManager" parent="." instance=ExtResource("3_cnc4v")]
